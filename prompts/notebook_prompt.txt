Objective:
Using the topics, summaries, and sections from the provided PDF, create a detailed Jupyter Notebook (.ipynb format) that offers hands-on coding exercises aligned with the main topic. Each problem should be divided into small, well-explained steps, with each code cell addressing one specific task.

Generation:
tip: use one problem at a time to make sure the output is correct. 
1) Examine all the major topics extracted and generate a problem(code) for each. 
2) Store each problem(code) in your memory 
3) Divide every problem(code) into themes. ex: data preprocessing, training the model 
4) Divde each theme into subtasks, making sure the problem (code) is also divided.
5) Use these subtasks codes in the notebook.

Structure:

1) Title and Introduction:
- Title: Reflects the PDF's main topic.
- Introduction: Provide an overview of the main topic, its importance, and the challenges it addresses in the broader field of software engineering. State the problems the notebook will solve, and how step-by-step implementations will aid understanding.

2) Sections for Each Major Topic:
For each major topic from the PDF:
- Title: The major topic.
- Description/Context: Explain the topic’s relevance and role in solving the overall problem.

3) Coding Exercises:
For each major topic:
- Explanation: Briefly explain the concept and why the following code is necessary.
- Generate a problem to solve the major topic. 
- Step-by-Step Implementation:
    - Divide problems into small, sequential steps, each with a dedicated code cell (e.g., split data, train model, validate).
    - Provide comments to explain what the code does and why specific methods are used.
    - Ensure each cell accomplishes one task only (e.g., train-test split in one cell, model training in another).
    - If the code involves mathematical equations, please specify them before and explain them.
- Practical Problems: Implement relevant problems (e.g., compute forward propagation, apply regularization, augment data). Use synthetic or real datasets for clarity.

4) Visualizations:
- Include visualizations (plots, graphs) to support concepts and results.
- Use placeholders or markdown explanations for any required diagrams.

5) Conclusion:
- Summarize the notebook’s content and solutions.
- Suggest further reading/resources and highlight practical applications of the concepts.

6) Formatting and Structure:
- Use clear Markdown headers for each section and subtopic.
- Code cells should precede explanations to facilitate learning interactively.
- Ensure logical flow from problem definition to solution.

Before you give me the notebook, please sure all the major topics have problems, not just the first one.

Example:

Subtopic: Train-Test Split
Explanation: Splitting data ensures fair evaluation of a model’s performance.
'''
# Split dataset into training and testing sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print(f"Train set: {len(X_train)}, Test set: {len(X_test)}")
'''
Subtopic: Model Training
Explanation: Train a linear regression model on the training set.
'''
# Train the model
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train, y_train)
print("Model trained successfully.")
'''
Subtopic: Validation
Explanation: Validate the model using the test set to assess its accuracy.
'''
# Validate the model
from sklearn.metrics import mean_squared_error
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
'''
