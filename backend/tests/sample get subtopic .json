{
    "status": "success",
    "content": {
      "cells": [
        {
          "cell_type": "markdown",
          "metadata": {},
          "source": ["# CNNs (Convolutional Neural Networks)"]
        },
        {
          "cell_type": "markdown",
          "metadata": {},
          "source": [
            "## Introduction to CNNs\n\n",
            "Convolutional Neural Networks (CNNs) are a class of deep neural networks commonly used for analyzing visual data. They are particularly effective for tasks such as image recognition and classification, owing to their ability to automatically discover hierarchical patterns in the data.\n\n",
            "CNNs are structured in layers, comprising convolutional layers, pooling layers, and fully connected layers, each playing a critical role in information extraction and classification."
          ]
        },
        {
          "cell_type": "markdown",
          "metadata": {},
          "source": [
            "## 1. Convolutional Layers\n\n",
            "Convolutional layers are the cornerstone of CNNs. These layers apply a set of filters (or kernels) to the input data, such as an image, to detect various spatial features like edges, textures, and patterns. The operation known as convolution involves sliding the filter over the input image and computing the dot product, producing a feature map that represents the presence of features detected by the filter.\n\n",
            "### Summary\n\n",
            "Convolutional layers capture spatial hierarchies by learning filters that become increasingly abstract in deeper layers. Early layers detect low-level features such as edges in different orientations, while deeper layers capture high-level concepts such as objects or human faces.\n\n",
            "### Example\n\n",
            "In image recognition, a convolutional layer might use different filters to detect edges regarding horizontal, vertical, or diagonal orientations. The outputs help recognize more complex structures as it proceeds through additional layers."
          ]
        },
        {
          "cell_type": "markdown",
          "metadata": {},
          "source": [
            "## 2. Pooling Layers\n\n",
            "Pooling layers follow convolutional layers in a CNN and serve to progressively reduce the spatial size of the representation, minimizing the number of parameters and computation in the network. This helps control overfitting.\n\n",
            "### Summary\n\n",
            "Pooling typically involves downsampling operations such as max pooling, where the maximum value over a fixed-size patch of the feature map is selected, or average pooling, where the average is taken. This operation retains the most prominent features while discarding redundant information."
          ]
        },
        {
          "cell_type": "markdown",
          "metadata": {},
          "source": [
            "## 3. Fully Connected Layers\n\n",
            "Fully connected layers, also known as dense layers, are used for the final stages of CNN architectures. As opposed to convolutional layers, every neuron in a fully connected layer is connected to every neuron in the previous layer.\n\n",
            "### Summary\n\n",
            "These layers are used to output predictions by learning a non-linear combination of high-level attributes produced from the preceding layers and mapping them to class scores or other predictive outputs."
          ]
        },
        {
          "cell_type": "code",
          "metadata": {},
          "source": [
            "# Import necessary libraries\n",
            "import numpy as np\n",
            "import matplotlib.pyplot as plt\n",
            "from keras.models import Sequential\n",
            "from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\n",
            "from keras.datasets import mnist\n",
            "from keras.utils import to_categorical"
          ],
          "execution_count": null,
          "outputs": []
        },
        {
          "cell_type": "markdown",
          "metadata": {},
          "source": [
            "## 4. Code Example: Building a Simple CNN\n\n",
            "The following code sets up a simple CNN using the Keras library. After preparing the MNIST dataset, a three-layered CNN is built for digit classification."
          ]
        },
        {
          "cell_type": "code",
          "metadata": {},
          "source": [
            "# Load MNIST data\n",
            "(x_train, y_train), (x_test, y_test) = mnist.load_data()\n",
            "x_train = x_train.reshape((x_train.shape[0], 28, 28, 1)).astype('float32') / 255\n",
            "x_test = x_test.reshape((x_test.shape[0], 28, 28, 1)).astype('float32') / 255\n",
            "y_train = to_categorical(y_train, 10)\n",
            "y_test = to_categorical(y_test, 10)"
          ],
          "execution_count": null,
          "outputs": []
        },
        {
          "cell_type": "code",
          "metadata": {},
          "source": [
            "# Build a simple CNN model\n",
            "model = Sequential([\n",
            "    Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)),\n",
            "    MaxPooling2D(pool_size=(2, 2)),\n",
            "    Flatten(),\n",
            "    Dense(128, activation='relu'),\n",
            "    Dense(10, activation='softmax')\n",
            "])\n\n",
            "# Compile the model\n",
            "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])"
          ],
          "execution_count": null,
          "outputs": []
        },
        {
          "cell_type": "markdown",
          "metadata": {},
          "source": [
            "## 5. Exercises\n\n",
            "1. **Understanding Filters**: Modify the existing CNN code to implement your custom filters in the first `Conv2D` layer. Observe how the initial layers affect the feature maps.\n\n",
            "2. **Explore Pooling Variations**: Try replacing `MaxPooling2D` with `AveragePooling2D` and comment on the accuracy change for the MNIST dataset.\n\n",
            "3. **Network Architecture**: Expand the existing CNN by adding more convolutional and pooling layers and monitor changes in training time and accuracy. Why might a more profound network improve results?\n\n",
            "4. **Analysis**: Train the model for multiple epochs and plot the training vs. validation accuracy/loss curves. Identify signs of overfitting or underfitting."
          ]
        }
      ],
      "metadata": {},
      "nbformat": 4,
      "nbformat_minor": 5
    }
  }
  